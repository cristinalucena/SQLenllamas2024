[
	{
		"question_day": 1,
		"question": "¿Cuánto ha gastado en total cada cliente en el restaurante?",
		"answer": [
					"Customer A: 76" , 
					"Customer B: 74" , 
					"Customer C: 36" , 
					"Customer D: 0"
		],
		"explanation": "La consulta SQL utilizada (ver solution_day1_mat.sql) busca la cantidad total gastada por cada cliente, incluso si algunos clientes no han realizado compras. Utiliza las tablas MEMBERS, SALES, y MENU, uniendo la información por los IDs de cliente y de producto. La función NVL(PRICE, 0) trata los valores nulos en la columna PRICE como ceros. La consulta final agrupa los resultados por el ID de cliente, proporcionando el gasto total para cada cliente, con inclusión de aquellos sin compras."
	},
	{
		"question_day": 2,
		"question": "¿Cuántos días ha visitado el restaurante cada cliente?",
		"answer": [
					"Customer B: 6 visitas" ,
					"Customer A: 4 visitas" , 
					"Customer C: 2 visitas" , 
					"Customer D: 0 visitas"
		],
		"explanation": "La consulta SQL utilizada (ver solution_day2_mat.sql) cuenta cuántos días únicos ha visitado cada cliente el restaurante. Utiliza las tablas MEMBERS y SALES, uniendo la información por los IDs de cliente. El resultado muestra el número de visitas únicas por cliente, ordenadas de mayor a menor, incluso si algunos clientes no han realizado compras."
	},
	{
		"question_day": 3,
		"question": "¿Cuál es el primer producto que ha pedido cada cliente?",
		"answer": [
					"Customer A: sushi y curry (pidió ambos el mismo día)", 
					"Customer B: curry ", 
					"Customer C: ramen"
		],
		"explanation": "La consulta SQL utilizada (ver solution_day3_mat.sql) identifica el primer pedido de cada cliente, incluyendo el nombre del producto desde la tabla MENU. Se ha usado RANK() en vez del ROW_NUMBER() porque el ORDER_DATE sólo muestra la fecha y no la hora, por lo que no sabemos que producto se compró primero en caso de la compra de dos productos el mismo día. En este caso, es decir en caso de empate, muestra los dos"
	},
	{
		"question_day": 4,
		"question": "¿Cuál es el producto más pedido del menú y cuántas veces ha sido pedido?",
		"answer": 	"Ramen: 8 veces", 
		"explanation": "La consulta SQL utilizada (ver solution_day4_mat.sql) identifica el producto más pedido con un COUNT, utilizamos la función ROW_NUMBER, para asignar un ranking a cada producto según la cantidad de pedidos, y luego seleccionamos los productos que tengan este ranking igual a 1, lo que significa que es el producto más vendido."
	}
]